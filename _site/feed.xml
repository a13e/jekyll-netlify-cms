<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-09-10T13:56:37+09:00</updated><id>http://localhost:4000/</id><title type="html">a13e Blog</title><subtitle>Hello, world</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2018/02/23/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-02-23T01:12:57+09:00</published><updated>2018-02-23T01:12:57+09:00</updated><id>http://localhost:4000/jekyll/update/2018/02/23/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/02/23/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">React Native Tutorial Day1</title><link href="http://localhost:4000/reactnative/2018/02/11/learn-react-native-day1.html" rel="alternate" type="text/html" title="React Native Tutorial Day1" /><published>2018-02-11T09:00:02+09:00</published><updated>2018-02-11T09:00:02+09:00</updated><id>http://localhost:4000/reactnative/2018/02/11/learn-react-native-day1</id><content type="html" xml:base="http://localhost:4000/reactnative/2018/02/11/learn-react-native-day1.html">&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react-native/docs/getting-started.html&quot;&gt;React Native&lt;/a&gt;の学習メモ&lt;/p&gt;

&lt;h2 id=&quot;expo&quot;&gt;Expo&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://expo.io/&quot;&gt;Expo&lt;/a&gt;がすごくて早速テンションが上がった&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/react-community/create-react-native-app&quot;&gt;create-react-native-app&lt;/a&gt;をローカルに落として、立ち上げると、QRコードが表示され、Expoアプリで読み取るだけで、HMRができる優れもの。&lt;/p&gt;

&lt;p&gt;まだ全体像が見えてないので、わからないことだらけだが、下記のようなWeb開発をしていれば見慣れたES6コードを書くだけでモバイルアプリが開発できるのは学習コストの面で良さそうな印象を実際に触ってそのまま感じ取れた。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import React, { Component } from 'react';
import { AppRegistry, Text } from 'react-native';

export default class HelloWorldApp extends Component {
  render() {
    return (
      &amp;lt;Text&amp;gt;Hello world!&amp;lt;/Text&amp;gt;
    );
  }
}

// skip this line if using Create React Native App
AppRegistry.registerComponent('AwesomeProject', () =&amp;gt; HelloWorldApp);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;React Native, Expoをはじめて使った高揚感でフェアに捉えきれてない感じはある。魔法のアイテムにすら感じてしまっている。
iOS/Android掛け持ちの辛さ等があるはずなので、もう少し触ってメリデメを実際に感じとっていきたい。&lt;/p&gt;</content><author><name></name></author><summary type="html">React Nativeの学習メモ</summary></entry><entry><title type="html">Stimulus Introduction</title><link href="http://localhost:4000/stimulus/javascript/2018/02/11/stimulus-introduction.html" rel="alternate" type="text/html" title="Stimulus Introduction" /><published>2018-02-11T09:00:01+09:00</published><updated>2018-02-11T09:00:01+09:00</updated><id>http://localhost:4000/stimulus/javascript/2018/02/11/stimulus-introduction</id><content type="html" xml:base="http://localhost:4000/stimulus/javascript/2018/02/11/stimulus-introduction.html">&lt;p&gt;&lt;a href=&quot;https://stimulusjs.org/handbook/introduction&quot;&gt;Stimulus Introduction&lt;/a&gt;の感想・メモ。&lt;/p&gt;

&lt;h2 id=&quot;全体としての感想&quot;&gt;全体としての感想&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;全体としてStimulusはバックエンドアプリケーションが生成したHTML DOMに対する操作をする機能のためのライブラリとしてデザインされており小さくシンプルであるのが印象的。&lt;/li&gt;
  &lt;li&gt;生成済みDOMへの操作のみが使用用途であることが事前にわかりきっているケースであれば、jQueryで自前のDOM手術をするよりもはるかに保守性を高くコストを抑えてプロダクト開発ができると感じた。&lt;/li&gt;
  &lt;li&gt;SPAをつくるための機能が一切ないので、チーム開発においては開発方針が絞れる意味でも良いと感じた。(一部メンバーが非同期処理で暴れるみたいなことを防ぎやすい)&lt;/li&gt;
  &lt;li&gt;データ追加系に関しては下記に記載のようにもう少しサポートしてもよいのではないかと感じた。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;非同期ロードからの要素追加に関して&quot;&gt;非同期ロードからの要素追加に関して&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are cases where you’d want Stimulus to create new DOM elements, and you’re definitely free to do that. We might even add some sugar to make it easier in the future. But it’s the minority use case. The focus is on manipulating, not creating elements.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これは&lt;a href=&quot;https://m.signalvnoise.com/stimulus-1-0-a-modest-javascript-framework-for-the-html-you-already-have-f04307009130&quot;&gt;DHHさんが書いたMedium&lt;/a&gt;からの抜粋だが、この一文がどういうことなのかが、Introduction内のこの章ではっきりとした。
現行仕様では、データに応じて、要素を増やすには下記のような形で、直接DOMをユーザー側で操作する必要が出てしまう。(Welcome to DOM surgery party!)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { Controller } from &quot;stimulus&quot;

export default class extends Controller {
  connect() {
    this.load()
  }

  load() {
    fetch(this.data.get(&quot;url&quot;))
      .then(response =&amp;gt; response.text())
      .then(html =&amp;gt; {
        this.element.innerHTML = html
      })
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;個人的にはStimulusを使用するケース(管理画面等)においても、リスト型のデータに新しい要素をユーザー起因のイベントで追加して、画面更新するような用途は多いので、アップデートが期待される。&lt;/p&gt;</content><author><name></name></author><summary type="html">Stimulus Introductionの感想・メモ。</summary></entry><entry><title type="html">Lisp Macros</title><link href="http://localhost:4000/lisp/2018/01/07/lisp-macros.html" rel="alternate" type="text/html" title="Lisp Macros" /><published>2018-01-07T09:00:01+09:00</published><updated>2018-01-07T09:00:01+09:00</updated><id>http://localhost:4000/lisp/2018/01/07/lisp-macros</id><content type="html" xml:base="http://localhost:4000/lisp/2018/01/07/lisp-macros.html">&lt;p&gt;Lisp Macrosについてメモ&lt;/p&gt;

&lt;h2 id=&quot;macros-マクロ&quot;&gt;Macros (マクロ)&lt;/h2&gt;

&lt;p&gt;マクロを使うと標準的なLispの文法を拡張することができる
技術的には、マクロはS式を引数にとり、&lt;code class=&quot;highlighter-rouge&quot;&gt;Lisp form&lt;/code&gt;を返却する関数で、それが評価されるものとなる。&lt;/p&gt;

&lt;h2 id=&quot;マクロを定義する&quot;&gt;マクロを定義する&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;defmacro&lt;/code&gt;というマクロでマクロを定義することができる
下記がマクロの文法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(defmacro macro-name (parameter-list))
&quot;Optional documentation string.&quot;
body-form
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下記例では&lt;code class=&quot;highlighter-rouge&quot;&gt;setTo10&lt;/code&gt;という名前の、数値の引数をとり、その変数を10へ上書きするマクロを定義する&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(defmacro setTo10(num)
(setq num 10)(print num))
(setq x 25)
(print x)
(setTo10 x)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実行すると下記が表示される&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;25
10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.tutorialspoint.com/lisp/lisp_macros.htm&quot;&gt;https://www.tutorialspoint.com/lisp/lisp_macros.htm&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Lisp Macrosについてメモ</summary></entry><entry><title type="html">Lisp Data Types</title><link href="http://localhost:4000/lisp/2018/01/07/lisp-data-types.html" rel="alternate" type="text/html" title="Lisp Data Types" /><published>2018-01-07T09:00:00+09:00</published><updated>2018-01-07T09:00:00+09:00</updated><id>http://localhost:4000/lisp/2018/01/07/lisp-data-types</id><content type="html" xml:base="http://localhost:4000/lisp/2018/01/07/lisp-data-types.html">&lt;p&gt;&lt;a href=&quot;https://www.tutorialspoint.com/lisp/lisp_data_types.htm&quot;&gt;https://www.tutorialspoint.com/lisp/lisp_data_types.htm&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;typep&quot;&gt;typep&lt;/h2&gt;

&lt;p&gt;オブジェクトが指定したタイプに属するかどうかを判定する関数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(typep 12 'integer) ; return T
(typep 12 'string) ; return NIL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;type-of&quot;&gt;type-of&lt;/h2&gt;

&lt;p&gt;オブジェクトのデータタイプを返す関数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(defvar x 10)
(print (type-of x))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;defstruct&quot;&gt;defstruct&lt;/h2&gt;

&lt;p&gt;自分でデータタイプを新たに定義することができる&lt;/p&gt;

&lt;h2 id=&quot;setq&quot;&gt;setq&lt;/h2&gt;

&lt;p&gt;変数を設定する&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(setq n 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;は&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(set (quote n) 4)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;と同義&lt;/p&gt;

&lt;h2 id=&quot;defvar&quot;&gt;defvar&lt;/h2&gt;

&lt;p&gt;setqと同様だが、変数が定義されていないときだけ使用するのが異なる。&lt;/p&gt;</content><author><name></name></author><summary type="html">https://www.tutorialspoint.com/lisp/lisp_data_types.htm</summary></entry><entry><title type="html">Lisp Basic Syntax</title><link href="http://localhost:4000/lisp/2018/01/06/learn-basic-syntax.html" rel="alternate" type="text/html" title="Lisp Basic Syntax" /><published>2018-01-06T09:00:00+09:00</published><updated>2018-01-06T09:00:00+09:00</updated><id>http://localhost:4000/lisp/2018/01/06/learn-basic-syntax</id><content type="html" xml:base="http://localhost:4000/lisp/2018/01/06/learn-basic-syntax.html">&lt;p&gt;&lt;a href=&quot;https://www.tutorialspoint.com/lisp/lisp_basic_syntax.htm&quot;&gt;https://www.tutorialspoint.com/lisp/lisp_basic_syntax.htm&lt;/a&gt;を参考にして学んだことをまとめる。&lt;/p&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;Hello, World&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(write-line &quot;Hello, World&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;basic-syntax---基本構文&quot;&gt;Basic Syntax - 基本構文&lt;/h2&gt;

&lt;p&gt;Lispプログラムは&lt;code class=&quot;highlighter-rouge&quot;&gt;atom&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;3つの基本ブロックで構築されている&lt;/p&gt;

&lt;h3 id=&quot;atom&quot;&gt;atom&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;atom&lt;/code&gt;は数値もしくは、文字列のこと。特殊記号も含む。&lt;/p&gt;

&lt;p&gt;下記が例&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello-from-tutorials-point
name
123008907
*hello*
Block#221
abc123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;list&quot;&gt;list&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;atom&lt;/code&gt;と他のカッコで囲われた&lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;で構成されるもの。&lt;/p&gt;

&lt;p&gt;下記が例&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;( i am a list )
(a ( a b c ) d e fgh )
( father tom ( susan bill joe ) )
( sum mon tue wed thur fri sat )
( )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;string&quot;&gt;string&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;string&lt;/code&gt;はダブルクォート記号で囲われた文字列のグループ&lt;/p&gt;

&lt;p&gt;下記が例&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot; I am a string&quot;
&quot;a ba c d efg #$%^&amp;amp;!&quot;
&quot;Please enter the following details :&quot;
&quot;Hello from 'Tutorials Point'! &quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;コメント&quot;&gt;コメント&lt;/h2&gt;

&lt;p&gt;行頭に &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; を使うことで、その行のあとをコメントとして扱うことができる&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(write-line &quot;Hello, World&quot;) ; greet the world

; tell them your whereabouts

(write-line &quot;I am at 'Tutorials Point'! Learning Lisp&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;注意点&quot;&gt;注意点&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;基本数値演算子は &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Lispでは&lt;code class=&quot;highlighter-rouge&quot;&gt;f(x)&lt;/code&gt;を&lt;code class=&quot;highlighter-rouge&quot;&gt;(f x)&lt;/code&gt;と表す。例えば&lt;code class=&quot;highlighter-rouge&quot;&gt;cos(45)&lt;/code&gt;は&lt;code class=&quot;highlighter-rouge&quot;&gt;cos 45&lt;/code&gt;として記述する&lt;/li&gt;
  &lt;li&gt;Lispは大文字/小文字を区別しないので、&lt;code class=&quot;highlighter-rouge&quot;&gt;cos 45&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;COS 45&lt;/code&gt;は同様に扱う&lt;/li&gt;
  &lt;li&gt;Lispは関数の引数を含めて、すべてを評価しようとします。下記3つのタイプの要素のみが定数であり、これらは常に自身の値を返します。
    &lt;ul&gt;
      &lt;li&gt;数値&lt;/li&gt;
      &lt;li&gt;文字列&lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;論理的な&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;を表す&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;空のリストと同様に、論理的な&lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;を表す&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lispの評価プロセス&quot;&gt;Lispの評価プロセス&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reader&lt;/code&gt;が文字列をLispオブジェクトか&lt;code class=&quot;highlighter-rouge&quot;&gt;s-expression (S式)&lt;/code&gt;に変換する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;evaluator&lt;/code&gt;がS式から構築される&lt;code class=&quot;highlighter-rouge&quot;&gt;Lips forms&lt;/code&gt;文法を定義する。この評価の第2レベルでどのS式が&lt;code class=&quot;highlighter-rouge&quot;&gt;Lisp forms&lt;/code&gt;であるかの文法を定義する。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Lisp forms&lt;/code&gt;は下記になりうる
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;atom&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;empty&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;non-list&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;第一要素としての、symbolを持つリスト&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;evaluator&lt;/code&gt;は引数としての正しい&lt;code class=&quot;highlighter-rouge&quot;&gt;Lisp form&lt;/code&gt;を受け、値を返す関数として動作する。
これがLispをカッコで囲んで記載する理由で、こうすることで、Lispの式及びform全体を&lt;code class=&quot;highlighter-rouge&quot;&gt;evaluator&lt;/code&gt;の引数として渡すことができている。&lt;/p&gt;

&lt;h2 id=&quot;評価させず文字列として扱う&quot;&gt;評価させず文字列として扱う&lt;/h2&gt;

&lt;p&gt;シングルクォートを使用することで, 関数評価をせず、その部分を文字列として扱うことができる&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(write '(* 2 3)) ; returns (* 2 3) -&amp;gt; not evaluated
(write (* 2 3)) ; returns 6 -&amp;gt; evaluated
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">https://www.tutorialspoint.com/lisp/lisp_basic_syntax.htmを参考にして学んだことをまとめる。</summary></entry><entry><title type="html">書評 - サピエンス全史(上)</title><link href="http://localhost:4000/reading/2017/09/03/0001.html" rel="alternate" type="text/html" title="書評 - サピエンス全史(上)" /><published>2017-09-03T09:00:00+09:00</published><updated>2017-09-03T09:00:00+09:00</updated><id>http://localhost:4000/reading/2017/09/03/0001</id><content type="html" xml:base="http://localhost:4000/reading/2017/09/03/0001.html">&lt;div class=&quot;col-4&quot;&gt;
&lt;a href=&quot;https://www.amazon.co.jp/%E3%82%B5%E3%83%94%E3%82%A8%E3%83%B3%E3%82%B9%E5%85%A8%E5%8F%B2-%E4%B8%8A-%E6%96%87%E6%98%8E%E3%81%AE%E6%A7%8B%E9%80%A0%E3%81%A8%E4%BA%BA%E9%A1%9E%E3%81%AE%E5%B9%B8%E7%A6%8F-%E3%83%A6%E3%83%B4%E3%82%A1%E3%83%AB-%E3%83%8E%E3%82%A2-%E3%83%8F%E3%83%A9%E3%83%AA/dp/430922671X/ref=as_li_ss_il?ie=UTF8&amp;amp;qid=1504442560&amp;amp;sr=8-1&amp;amp;keywords=%E3%82%B5%E3%83%94%E3%82%A8%E3%83%B3%E3%82%B9%E5%85%A8%E5%8F%B2&amp;amp;linkCode=li3&amp;amp;tag=koh51807-22&amp;amp;linkId=79ebc259471df362e25aeb335ff5b26d&quot; target=&quot;_blank&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=430922671X&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=JP&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=koh51807-22&quot; /&gt;&lt;/a&gt;&lt;img src=&quot;https://ir-jp.amazon-adsystem.com/e/ir?t=koh51807-22&amp;amp;l=li3&amp;amp;o=9&amp;amp;a=430922671X&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; alt=&quot;&quot; style=&quot;border:none !important; margin:0px !important;&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;虚構&quot;&gt;虚構&lt;/h2&gt;

&lt;p&gt;サピエンスはまったく存在しない、架空の事物について語る&lt;code class=&quot;highlighter-rouge&quot;&gt;虚構&lt;/code&gt;と筆者が呼ぶ能力によって、他の人類種及び他種族にはできないレベルの規模での協力を可能にした。
つまり&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;人間の大規模な協力体制は何であれ、人々の集合的想像の中にのみそんざいする共通の神話に根ざしている。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということになるそうだ。&lt;/p&gt;

&lt;h2 id=&quot;農業革命は史上最大の詐欺&quot;&gt;農業革命は史上最大の詐欺&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;第5章 農耕がもたらした繁栄と悲劇&lt;/code&gt;によれば農業革命は史上最大の詐欺だったという。
筆者曰く、農業革命が起きたことで、暮らし向きがよくなるどころか&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;平均的な農耕民は平均的な狩猟民族よりも苦労して働いたのに、見返りに得られる食べ物は劣っていた&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;という結果になったという。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;人々は、自らの決定がもたらす結果の全貌を捉えきれないのだ。 –【第5章 農耕がもたらした繁栄と悲劇】p.115&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">iOS 新規環境用にでビルドする</title><link href="http://localhost:4000/swift/xcode/2017/03/30/xcode-new-environment.html" rel="alternate" type="text/html" title="iOS 新規環境用にでビルドする" /><published>2017-03-30T09:00:00+09:00</published><updated>2017-03-30T09:00:00+09:00</updated><id>http://localhost:4000/swift/xcode/2017/03/30/xcode-new-environment</id><content type="html" xml:base="http://localhost:4000/swift/xcode/2017/03/30/xcode-new-environment.html">&lt;p&gt;BuildSettings → Swift Compiler → Other Swift Flags → DEBUGに「-D DEBUG」、Releaseに「-D RELEASE」を指定する。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2mxuefqeaa7sj.cloudfront.net/s_858DEC0D7A4F8F9AC7CA410BBA79C0AD71A287328F695AA5E66A1A7DFCB6682E_1490923941658_Screenshot+2017-03-31+10.32.08.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;左上の スキーマ → Manage Schemes… → 対象プロジェクトを選択して Edit → Run → Infoタブの Build Configuration を DEBUG/RELEASE に切り替える。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2mxuefqeaa7sj.cloudfront.net/s_858DEC0D7A4F8F9AC7CA410BBA79C0AD71A287328F695AA5E66A1A7DFCB6682E_1490924040080_Screenshot+2017-03-31+10.33.41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2mxuefqeaa7sj.cloudfront.net/s_858DEC0D7A4F8F9AC7CA410BBA79C0AD71A287328F695AA5E66A1A7DFCB6682E_1490924076837_Screenshot+2017-03-31+10.34.20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Cocoapods を使用している場合は、さらに設定が必要。
Pods → Info → Configurations で「Staging」を追加&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2mxuefqeaa7sj.cloudfront.net/s_858DEC0D7A4F8F9AC7CA410BBA79C0AD71A287328F695AA5E66A1A7DFCB6682E_1490924247107_Screenshot+2017-03-31+10.37.06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Build Settings → Apple LLVM 6.1 → Preprocessor Macros で Staging を「STAGING=1」に設定。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://d2mxuefqeaa7sj.cloudfront.net/s_858DEC0D7A4F8F9AC7CA410BBA79C0AD71A287328F695AA5E66A1A7DFCB6682E_1490924373651_Screenshot+2017-03-31+10.39.25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;環境別コンパイル&quot;&gt;環境別コンパイル&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#if DEBUG&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;デバッグ環境&quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#elseif STAGING&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ステージング環境&quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;リリース環境&quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;special-thanks&quot;&gt;Special Thanks&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://qiita.com/merrill/items/079999aa064f0df9baf7#%E7%92%B0%E5%A2%83%E3%81%94%E3%81%A8%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E5%88%86%E3%81%91%E3%82%8B&quot;&gt;http://qiita.com/merrill/items/079999aa064f0df9baf7#%E7%92%B0%E5%A2%83%E3%81%94%E3%81%A8%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E5%88%86%E3%81%91%E3%82%8B&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">BuildSettings → Swift Compiler → Other Swift Flags → DEBUGに「-D DEBUG」、Releaseに「-D RELEASE」を指定する。</summary></entry><entry><title type="html">Swift3 Xcode UITextField Keyboard Typeを設定する</title><link href="http://localhost:4000/swift/xcode/2017/03/30/xcode-keyboard-type.html" rel="alternate" type="text/html" title="Swift3 Xcode UITextField Keyboard Typeを設定する" /><published>2017-03-30T09:00:00+09:00</published><updated>2017-03-30T09:00:00+09:00</updated><id>http://localhost:4000/swift/xcode/2017/03/30/xcode-keyboard-type</id><content type="html" xml:base="http://localhost:4000/swift/xcode/2017/03/30/xcode-keyboard-type.html">&lt;p&gt;メールアドレス入力フォーム用のTextFieldに変更する&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emailField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyboardType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIKeyboardType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emailAddress&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;他にも色々あるらしい。
詳しくは参考URLにある。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;http://qiita.com/BlueRoyInc/items/07338e3f04c2509641ac
http://www.globalnerdy.com/2013/02/18/the-iphones-virtual-keyboards-a-visual-catalogue/
http://swift-nyumon.info/uitextfield_number_keyboard&lt;/p&gt;</content><author><name></name></author><summary type="html">メールアドレス入力フォーム用のTextFieldに変更する</summary></entry><entry><title type="html">Found an unexpected Mach-O header code: * in XCode 6</title><link href="http://localhost:4000/swift/xcode/2017/03/30/xcode-found-an-unexpected-mach-O-header-code.html" rel="alternate" type="text/html" title="Found an unexpected Mach-O header code: * in XCode 6" /><published>2017-03-30T09:00:00+09:00</published><updated>2017-03-30T09:00:00+09:00</updated><id>http://localhost:4000/swift/xcode/2017/03/30/xcode-found-an-unexpected-mach-O-header-code</id><content type="html" xml:base="http://localhost:4000/swift/xcode/2017/03/30/xcode-found-an-unexpected-mach-O-header-code.html">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;organizer&lt;/code&gt;で&lt;code class=&quot;highlighter-rouge&quot;&gt;Export&lt;/code&gt;したらタイトルのエラーが発生して困った
下記を参考にしたらうまく動作した。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/nhWxm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Somehow pods appeared to become an embedded binary. So I had to remove it, pod install once more, and the issue disappeared.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/26559948/found-an-unexpected-mach-o-header-code-1918975009-in-xcode-6&quot;&gt;http://stackoverflow.com/questions/26559948/found-an-unexpected-mach-o-header-code-1918975009-in-xcode-6&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">organizerでExportしたらタイトルのエラーが発生して困った 下記を参考にしたらうまく動作した。</summary></entry></feed>